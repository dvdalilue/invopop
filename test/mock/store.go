// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dvdalilue/invopop/db (interfaces: Store)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	db "github.com/dvdalilue/invopop/db"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddBasketProduct mocks base method.
func (m *MockStore) AddBasketProduct(arg0 context.Context, arg1, arg2 int64) (*db.Basket, *db.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBasketProduct", arg0, arg1, arg2)
	ret0, _ := ret[0].(*db.Basket)
	ret1, _ := ret[1].(*db.Error)
	return ret0, ret1
}

// AddBasketProduct indicates an expected call of AddBasketProduct.
func (mr *MockStoreMockRecorder) AddBasketProduct(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBasketProduct", reflect.TypeOf((*MockStore)(nil).AddBasketProduct), arg0, arg1, arg2)
}

// CreateBasket mocks base method.
func (m *MockStore) CreateBasket(arg0 context.Context) *db.Basket {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBasket", arg0)
	ret0, _ := ret[0].(*db.Basket)
	return ret0
}

// CreateBasket indicates an expected call of CreateBasket.
func (mr *MockStoreMockRecorder) CreateBasket(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBasket", reflect.TypeOf((*MockStore)(nil).CreateBasket), arg0)
}

// DeleteBasket mocks base method.
func (m *MockStore) DeleteBasket(arg0 context.Context, arg1 int64) *db.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBasket", arg0, arg1)
	ret0, _ := ret[0].(*db.Error)
	return ret0
}

// DeleteBasket indicates an expected call of DeleteBasket.
func (mr *MockStoreMockRecorder) DeleteBasket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBasket", reflect.TypeOf((*MockStore)(nil).DeleteBasket), arg0, arg1)
}

// GetBasket mocks base method.
func (m *MockStore) GetBasket(arg0 context.Context, arg1 int64) (*db.Basket, *db.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBasket", arg0, arg1)
	ret0, _ := ret[0].(*db.Basket)
	ret1, _ := ret[1].(*db.Error)
	return ret0, ret1
}

// GetBasket indicates an expected call of GetBasket.
func (mr *MockStoreMockRecorder) GetBasket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasket", reflect.TypeOf((*MockStore)(nil).GetBasket), arg0, arg1)
}

// GetBasketProducts mocks base method.
func (m *MockStore) GetBasketProducts(arg0 context.Context, arg1 int64) ([]*db.Product, *db.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBasketProducts", arg0, arg1)
	ret0, _ := ret[0].([]*db.Product)
	ret1, _ := ret[1].(*db.Error)
	return ret0, ret1
}

// GetBasketProducts indicates an expected call of GetBasketProducts.
func (mr *MockStoreMockRecorder) GetBasketProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasketProducts", reflect.TypeOf((*MockStore)(nil).GetBasketProducts), arg0, arg1)
}

// GetBaskets mocks base method.
func (m *MockStore) GetBaskets(arg0 context.Context) []*db.Basket {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaskets", arg0)
	ret0, _ := ret[0].([]*db.Basket)
	return ret0
}

// GetBaskets indicates an expected call of GetBaskets.
func (mr *MockStoreMockRecorder) GetBaskets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaskets", reflect.TypeOf((*MockStore)(nil).GetBaskets), arg0)
}

// GetProduct mocks base method.
func (m *MockStore) GetProduct(arg0 context.Context, arg1 int64) (*db.Product, *db.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", arg0, arg1)
	ret0, _ := ret[0].(*db.Product)
	ret1, _ := ret[1].(*db.Error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockStoreMockRecorder) GetProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockStore)(nil).GetProduct), arg0, arg1)
}

// GetProducts mocks base method.
func (m *MockStore) GetProducts(arg0 context.Context) []*db.Product {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", arg0)
	ret0, _ := ret[0].([]*db.Product)
	return ret0
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockStoreMockRecorder) GetProducts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockStore)(nil).GetProducts), arg0)
}
